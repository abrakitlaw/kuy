// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'buildsystem/dependencies.gradle'

def versionBuildFile = file('version.properties')
Properties versionBuildProps = new Properties()
versionBuildProps.load(new FileInputStream(versionBuildFile))

buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath 'com.google.gms:google-services:4.3.1'
        
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }

    ext {
        versionMajor = 0
        versionMinor = 1
        versionPatch = 0
        buildNumber = getBuildNumber(versionBuildProps['versionMajor'].toInteger(),
                versionBuildProps['versionMinor'].toInteger(),
                versionBuildProps['versionPatch'].toInteger(),
                versionBuildProps['buildNumber'].toInteger())

        versionName = getVersionName()
        versionCode = getVersionCode()

        autoIncrementVersionBuild = {
            versionBuildProps['buildNumber'] = getProdReleaseBuildNumber(
                    versionBuildProps['versionMajor'].toInteger(),
                    versionBuildProps['versionMinor'].toInteger(),
                    versionBuildProps['versionPatch'].toInteger(),
                    versionBuildProps['buildNumber'].toInteger()).toString()
            versionBuildProps['versionMajor'] = versionMajor.toString()
            versionBuildProps['versionMinor'] = versionMinor.toString()
            versionBuildProps['versionPatch'] = versionPatch.toString()
            versionBuildProps.store(versionBuildFile.newWriter(), null)
        }

        applicationId = 'id.kuy'
    }
}

def getVersionName() {
    def taskNames = project.gradle.startParameter.taskNames
    if (taskNames.contains("assembleproductionRelease") || taskNames.contains(":app:assembleProductionRelease")) {
        return "${versionMajor}.${versionMinor}.${versionPatch}"
    } else {
        return "${versionMajor}.${versionMinor}.${versionPatch}-${buildNumber}"
    }
}

def getVersionCode() {
    return versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + buildNumber
}

def getBuildNumber(def oldVersionMajor, def oldVersionMinor, def oldVersionPatch, def oldBuildNumber) {
    def taskNames = project.gradle.startParameter.taskNames
    if (taskNames.contains("assembleproductionRelease") || taskNames.contains(":app:assembleProductionRelease")) {
        return getProdReleaseBuildNumber(oldVersionMajor, oldVersionMinor, oldVersionPatch, oldBuildNumber)
    }

    return Integer.valueOf(System.getenv("BUILD_NUMBER") ?: 0)
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
